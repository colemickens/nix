# Makefile for Microsoft Visual C

VERSION = 2.1.2

NIX_BIN_DIR   = C:\work\nix-bootstrap\bin
NIX_CONF_DIR  = C:\work\nix-bootstrap\etc
NIX_DATA_DIR  = C:\work\nix-bootstrap\share
NIX_STORE_DIR = C:\nix\store
NIX_LOG_DIR   = C:\nix\var\log\nix
NIX_STATE_DIR = C:\nix\var\nix

# `nix-build -I nixpkgs=C:\....\nixpkgs-windows -E "with (import <nixpkgs> { }).pkgs; [ stdenv.cc boost openssl xz bzip2 curl_7_59 sqlite ]`
STDENV_CC = # C:\nix\store\n2p75ifmcgwmx26ym4niw9ws1wcza9k0-msvc-14.16.27023+sdk-10.0.17134.0+msbuild-15.0
BOOST     = # C:\nix\store\aj3ivgn1ssf4dd1v0ql1kp73b205dmg9-boost-1.67_0
OPENSSL   = # C:\nix\store\rrqyni9gl6b1109irkkczq806916qx4q-openssl-1.0.2p
XZ        = # C:\nix\store\7g885r45k50w6p63j8c8wikwzayhdcf1-xz-5.2.4
BZIP2     = # C:\nix\store\vnbhhhr7c6ckpdzwb2wh1rhcs6ma93rp-bzip2-1.0.6.0.1
CURL      = # C:\nix\store\pj26pxgvq4gv72768vv4abnvd21hy243-curl-7.59.0
SQLITE    = # C:\nix\store\dsx5fjbp8l6bxyvj8dlvjwm89zsibjxm-sqlite-3.24.0

# ensure no / in paths
_NIX_BIN_DIR   = $(NIX_BIN_DIR:/=\)
_NIX_CONF_DIR  = $(NIX_CONF_DIR:/=\)
_NIX_DATA_DIR  = $(NIX_DATA_DIR:/=\)
_NIX_STORE_DIR = $(NIX_STORE_DIR:/=\)
_NIX_LOG_DIR   = $(NIX_LOG_DIR:/=\)
_NIX_STATE_DIR = $(NIX_STATE_DIR:/=\)
_STDENV_CC     = $(STDENV_CC:/=\)
_BOOST         = $(BOOST:/=\)
_OPENSSL       = $(OPENSSL:/=\)
_XZ            = $(XZ:/=\)
_BZIP2         = $(BZIP2:/=\)
_CURL          = $(CURL:/=\)
_SQLITE        = $(SQLITE:/=\)


CC=$(_STDENV_CC)\bin\cl.exe
RUNTIME_LINK=/MT
CC_FLAGS=/nologo /std:c++latest /EHsc /Zi /GL $(RUNTIME_LINK)
CC_FLAGS=$(CC_FLAGS) -I$(_BOOST)\include \
                     -I$(_OPENSSL)\include \
                     -I$(_XZ)\include \
                     -I$(_BZIP2)\include \
                     -I$(_CURL)\include \
                     -I$(_SQLITE)\include
CC_FLAGS=$(CC_FLAGS) -I. -Isrc -Isrc\libstore -Isrc\libutil -Isrc\libmain -Isrc\libexpr
CC_FLAGS=$(CC_FLAGS) "-DPACKAGE_VERSION=\"$(VERSION)"\" \
                      -DYY_NO_UNISTD_H=1
CC_FLAGS=$(CC_FLAGS) "-DNIX_BIN_DIR=\"$(_NIX_BIN_DIR:\=\\)\"" \
                     "-DNIX_CONF_DIR=\"$(_NIX_CONF_DIR:\=\\)\"" \
                     "-DNIX_DATA_DIR=\"$(_NIX_DATA_DIR:\=\\)\"" \
                     "-DNIX_STORE_DIR=\"$(_NIX_STORE_DIR:\=\\)\"" \
                     "-DNIX_LOG_DIR=\"$(_NIX_LOG_DIR:\=\\)\"" \
                     "-DNIX_STATE_DIR=\"$(_NIX_STATE_DIR:\=\\)\""

LINK=$(_STDENV_CC)\bin\link.exe
LINK_FLAGS=/nologo /LTCG \
           /DEBUG \
           /LIBPATH:$(_BOOST)\lib \
           $(_OPENSSL)\lib\libeay32.lib \
           $(_OPENSSL)\lib\ssleay32.lib \
           $(_XZ)\lib\liblzma.lib \
           $(_BZIP2)\lib\libbz2.lib \
           $(_CURL)\lib\libcurl.lib \
           $(_SQLITE)\lib\sqlite3.lib


AR=$(_STDENV_CC)\bin\lib.exe
AR_FLAGS=/nologo /LTCG

.cc.obj:
  $(CC) -c -Fo:$@ $(CC_FLAGS) $<

.cpp.obj:
  $(CC) -c -Fo:$@ $(CC_FLAGS) $<


all: nix.exe nix-instantiate.exe nix-build.exe nix-store.exe

LIBEXPR_SRC=src\libexpr\attr-path.cc \
            src\libexpr\attr-set.cc \
            src\libexpr\common-eval-args.cc \
            src\libexpr\eval.cc \
            src\libexpr\get-drvs.cc \
            src\libexpr\json-to-value.cc \
            src\libexpr\lexer-tab.cc \
            src\libexpr\names.cc \
            src\libexpr\nixexpr.cc \
            src\libexpr\parser-tab.cc \
            src\libexpr\primops.cc \
            src\libexpr\value-to-json.cc \
            src\libexpr\value-to-xml.cc \
            src\libexpr\primops\fetchGit.cc \
            src\libexpr\primops\fetchMercurial.cc \
            src\libexpr\primops\fromTOML.cc
LIBEXPR_OBJ=$(LIBEXPR_SRC:.cc=.obj)
libexpr.lib: $(LIBEXPR_OBJ)
  $(AR) $(AR_FLAGS) -out:$@ $(LIBEXPR_OBJ)


LIBMAIN_SRC=src\libmain\common-args.cc \
            src\libmain\shared.cc \
            src\libmain\stack.cc
LIBMAIN_OBJ=$(LIBMAIN_SRC:.cc=.obj)
libmain.lib: $(LIBMAIN_OBJ)
  $(AR) $(AR_FLAGS) -out:$@ $(LIBMAIN_OBJ)

LIBUTIL_SRC=src\libutil\affinity.cc \
            src\libutil\archive.cc \
            src\libutil\args.cc \
            src\libutil\compression.cc \
            src\libutil\config.cc \
            src\libutil\hash.cc \
            src\libutil\json.cc \
            src\libutil\logging.cc \
            src\libutil\serialise.cc \
            src\libutil\thread-pool.cc \
            src\libutil\util.cc \
            src\libutil\xml-writer.cc
LIBUTIL_OBJ=$(LIBUTIL_SRC:.cc=.obj)
libutil.lib: $(LIBUTIL_OBJ)
  $(AR) $(AR_FLAGS) -out:$@ $(LIBUTIL_OBJ)

LIBSTORE_SRC=src\libstore\binary-cache-store.cc \
             src\libstore\build.cc \
             src\libstore\crypto.cc \
             src\libstore\derivations.cc \
             src\libstore\download.cc \
             src\libstore\export-import.cc \
             src\libstore\gc.cc \
             src\libstore\globals.cc \
             src\libstore\http-binary-cache-store.cc \
             src\libstore\legacy-ssh-store.cc \
             src\libstore\local-binary-cache-store.cc \
             src\libstore\local-fs-store.cc \
             src\libstore\local-store.cc \
             src\libstore\machines.cc \
             src\libstore\misc.cc \
             src\libstore\nar-accessor.cc \
             src\libstore\nar-info-disk-cache.cc \
             src\libstore\nar-info.cc \
             src\libstore\optimise-store.cc \
             src\libstore\pathlocks.cc \
             src\libstore\profiles.cc \
             src\libstore\references.cc \
             src\libstore\remote-fs-accessor.cc \
             src\libstore\remote-store.cc \
             src\libstore\s3-binary-cache-store.cc \
             src\libstore\sqlite.cc \
             src\libstore\ssh-store.cc \
             src\libstore\ssh.cc \
             src\libstore\store-api.cc \
             src\libstore\builtins\buildenv.cc \
             src\libstore\builtins\fetchurl.cc
LIBSTORE_OBJ=$(LIBSTORE_SRC:.cc=.obj)
libstore.lib: $(LIBSTORE_OBJ)
  $(AR) $(AR_FLAGS) -out:$@ $(LIBSTORE_OBJ)

LINENOISE_SRC=src\linenoise\ConvertUTF.cpp \
              src\linenoise\linenoise.cpp \
              src\linenoise\wcwidth.cpp
LINENOISE_OBJ=$(LINENOISE_SRC:.cpp=.obj)
linenoise.lib: $(LINENOISE_OBJ)
  $(AR) $(AR_FLAGS) -out:$@ $(LINENOISE_OBJ)

NIX_SRC=src\nix\add-to-store.cc \
        src\nix\build.cc \
        src\nix\cat.cc \
        src\nix\command.cc \
        src\nix\copy.cc \
        src\nix\dump-path.cc \
        src\nix\edit.cc \
        src\nix\eval.cc \
        src\nix\hash.cc \
        src\nix\installables.cc \
        src\nix\legacy.cc \
        src\nix\log.cc \
        src\nix\ls.cc \
        src\nix\main.cc \
        src\nix\optimise-store.cc \
        src\nix\path-info.cc \
        src\nix\ping-store.cc \
        src\nix\progress-bar.cc \
        src\nix\repl.cc \
        src\nix\run.cc \
        src\nix\search.cc \
        src\nix\show-config.cc \
        src\nix\show-derivation.cc \
        src\nix\sigs.cc \
        src\nix\upgrade-nix.cc \
        src\nix\verify.cc \
        src\nix\why-depends.cc
NIX_OBJ=$(NIX_SRC:.cc=.obj)
nix.exe: $(NIX_OBJ) libexpr.lib libmain.lib libutil.lib libstore.lib linenoise.lib
  $(LINK) $(LINK_FLAGS) -out:$@ $(NIX_OBJ) libexpr.lib libmain.lib libutil.lib libstore.lib linenoise.lib

NIX_INSTANTIATE_SRC=src\nix-instantiate\nix-instantiate.cc
NIX_INSTANTIATE_OBJ=$(NIX_INSTANTIATE_SRC:.cc=.obj)
nix-instantiate.exe: $(NIX_INSTANTIATE_OBJ) libexpr.lib libmain.lib libutil.lib libstore.lib linenoise.lib
  $(LINK) $(LINK_FLAGS) -out:$@ $(NIX_INSTANTIATE_OBJ) libexpr.lib libmain.lib libutil.lib libstore.lib linenoise.lib

NIX_BUILD_SRC=src\nix-build\nix-build.cc
NIX_BUILD_OBJ=$(NIX_BUILD_SRC:.cc=.obj)
nix-build.exe: $(NIX_BUILD_OBJ) libexpr.lib libmain.lib libutil.lib libstore.lib linenoise.lib
  $(LINK) $(LINK_FLAGS) -out:$@ $(NIX_BUILD_OBJ) libexpr.lib libmain.lib libutil.lib libstore.lib linenoise.lib

NIX_STORE_SRC=src\nix-store\nix-store.cc \
              src\nix-store\xmlgraph.cc \
              src\nix-store\dotgraph.cc
NIX_STORE_OBJ=$(NIX_STORE_SRC:.cc=.obj)
nix-store.exe: $(NIX_STORE_OBJ) libexpr.lib libmain.lib libutil.lib libstore.lib linenoise.lib
  $(LINK) $(LINK_FLAGS) -out:$@ $(NIX_STORE_OBJ) libexpr.lib libmain.lib libutil.lib libstore.lib linenoise.lib

install: all
  -md $(_NIX_BIN_DIR)
  copy $(_OPENSSL)\bin\libeay32.dll            $(_NIX_BIN_DIR)\LIBEAY32.dll
  copy $(_OPENSSL)\bin\ssleay32.dll            $(_NIX_BIN_DIR)\SSLEAY32.dll
  copy $(_XZ)\bin\liblzma.dll                  $(_NIX_BIN_DIR)\liblzma.dll
  copy $(_CURL)\bin\libcurl.dll                $(_NIX_BIN_DIR)\libcurl.dll
  copy $(_CURL)\bin\zlib1.dll                  $(_NIX_BIN_DIR)\zlib1.dll
  copy $(_SQLITE)\bin\sqlite3.dll              $(_NIX_BIN_DIR)\sqlite3.dll
  copy nix.exe                                 $(_NIX_BIN_DIR)\nix.exe
  copy nix.pdb                                 $(_NIX_BIN_DIR)\nix.pdb
  copy nix-instantiate.exe                     $(_NIX_BIN_DIR)\nix-instantiate.exe
  copy nix-instantiate.pdb                     $(_NIX_BIN_DIR)\nix-instantiate.pdb
  copy nix-build.exe                           $(_NIX_BIN_DIR)\nix-build.exe
  copy nix-build.pdb                           $(_NIX_BIN_DIR)\nix-build.pdb
  copy nix-store.exe                           $(_NIX_BIN_DIR)\nix-store.exe
  copy nix-store.pdb                           $(_NIX_BIN_DIR)\nix-store.pdb
  -md $(_NIX_CONF_DIR)
  echo # nix.conf                            > $(_NIX_CONF_DIR)/nix.conf
  -md $(_NIX_DATA_DIR)\nix\corepkgs
  copy corepkgs\fetchurl.nix                   $(_NIX_DATA_DIR)\nix\corepkgs\fetchurl.nix
  copy corepkgs\derivation.nix                 $(_NIX_DATA_DIR)\nix\corepkgs\derivation.nix
  copy corepkgs\imported-drv-to-derivation.nix $(_NIX_DATA_DIR)\nix\corepkgs\imported-drv-to-derivation.nix
  copy corepkgs\buildenv.nix                   $(_NIX_DATA_DIR)\nix\corepkgs\buildenv.nix

clean:
  del libexpr.lib $(LIBEXPR_OBJ)
  del libmain.lib $(LIBMAIN_OBJ)
  del libutil.lib $(LIBUTIL_OBJ)
  del libstore.lib $(LIBSTORE_OBJ)
  del linenoise.lib $(LINENOISE_OBJ)
  del nix.exe $(NIX_OBJ)
  del nix-instantiate.exe $(NIX_INSTANTIATE_OBJ)
  del nix-build.exe $(NIX_BUILD_OBJ)
  del nix-store.exe $(NIX_STORE_OBJ)
